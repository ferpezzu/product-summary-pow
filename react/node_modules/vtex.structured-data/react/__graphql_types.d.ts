export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Markdown: any;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};


















export type Behavior = 
  | 'USER_ONLY'
  | 'USER_AND_APP'
  | 'FULL';







export type Encoding = 
  | 'ICU'
  | 'HANDLEBARS';


export type IndexedMessages = {
  from: Scalars['String'];
  messages: Array<MessageInputV2>;
};


export type IoCacheControlScope = 
  | 'SEGMENT'
  | 'PUBLIC'
  | 'PRIVATE';




export type ListArgsV2 = {
  range: MessagesRange;
};




export type MessageInputV2 = {
  content: Scalars['String'];
  context?: Maybe<Scalars['String']>;
  behavior?: Maybe<Behavior>;
};


export type MessageSaveInputV2 = {
  srcLang: Scalars['String'];
  srcMessage: Scalars['String'];
  targetMessage: Scalars['String'];
  groupContext?: Maybe<Scalars['String']>;
  context?: Maybe<Scalars['String']>;
};

export type MessagesRange = {
  from: Scalars['Int'];
  to: Scalars['Int'];
};







export type SaveArgsV2 = {
  to: Scalars['String'];
  messages: Array<MessageSaveInputV2>;
  fireEvent?: Maybe<Scalars['Boolean']>;
};




export type TranslateArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree?: Maybe<Scalars['String']>;
  encoding?: Maybe<Encoding>;
};

export type TranslateWithDependenciesArgs = {
  indexedByFrom: Array<IndexedMessages>;
  to: Scalars['String'];
  depTree: Scalars['String'];
  encoding?: Maybe<Encoding>;
};




export type GetSettingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSettingsQuery = { __typename?: 'Query', appSettings?: Maybe<{ __typename?: 'GenericResponse', message?: Maybe<string> }> };

export {}